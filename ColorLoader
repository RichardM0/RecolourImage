import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.imageio.*;
import java.util.ArrayList;
import java.util.Collections;
import java.lang.Thread;
import javax.swing.*;
import java.util.Random;


public class ColorLoader extends JPanel{
    private BufferedImage img, originalImg;
    private int curWidth, curHeight, imgX, imgY;
    private File curImage;
    public ColorLoader(){
        loadImage(new File("images/car.jpeg"));
    }
    public void loadImage(File f) {
        try {
            curImage = f;
            img = ImageIO.read(f);
            originalImg = ImageIO.read(f);
            curWidth = img.getWidth();
            curHeight = img.getHeight();
            imgX = 300-curWidth/2;
            imgY = 250-curHeight/2;
            if(curWidth>300 || curHeight>300){
                resize(300/Double.valueOf(curWidth), 300/Double.valueOf(curHeight));
            }
        }
        catch (IOException e) {
            System.out.println("Image could not be read");
        }
    }
    public void resize(double ws, double hs){
        double scale = Math.min(ws, hs);
        curWidth = (int)(Double.valueOf(curWidth)*scale);
        curHeight = (int)(Double.valueOf(curHeight)*scale);
        
        BufferedImage resizedImage = new BufferedImage(curWidth, curHeight, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = resizedImage.createGraphics();
        g.drawImage(img, 0, 0 , curWidth, curHeight, null);
        g.dispose();
        img = resizedImage;
        repaint();
    }
    public void changeColor(int r, int g, int b) {
        for (int x = 0; x < curWidth; x++) {
            for (int y = 0; y < curHeight; y++) {
                int rgb = img.getRGB(x, y);
                Color color = new Color(rgb, true);
                if (isGreen(color)) {
                    int red = color.getRed();
                    int green = color.getGreen();
                    int blue = color.getBlue();
                    int fact = Math.max(red, Math.max(green, blue));
                    int newRed = (r*fact)/255;  
                    int newGreen = (g*fact)/255;
                    int newBlue = (b*fact)/255;

                    Color newColor = new Color(newRed, newGreen, newBlue, color.getAlpha());
                    img.setRGB(x, y, newColor.getRGB());
                }

            }
        }
        repaint();
    }
    public boolean isGreen(Color color){
        int red = color.getRed();
        int green = color.getGreen();
        int blue = color.getBlue();
    
        int brightness = (red + green + blue) / 3;
    
        return green > red + 7 && green > blue + 7 && brightness < 200;
    }
    public void updateImg()
    {
        repaint();
    }
    public BufferedImage getImg(){
        return img;
    }
    public void toOriginalImg(){
        loadImage(curImage);
        repaint();
    }
    public void paint(Graphics g){
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.drawImage(img, imgX, imgY, curWidth, curHeight, null);
    }
}
