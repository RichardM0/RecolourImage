
import java.awt.event.*;
import java.awt.Color;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JButton;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import java.io.File;
import javax.imageio.*;
import java.awt.image.BufferedImage;

public class ColorMain extends JFrame implements ItemListener, ActionListener
{
   /*
    * Static variables for class BallFrame
    * Each individual Java Swing element
    */
   public static JFrame frame;
   private static JMenuBar menuBar;
   private static JMenu colorMenu;
   private static JRadioButtonMenuItem blue, red, yellow, magenta;
   private static JPanel subPanel; 
   private static JButton save, revert, selectColor, chooseImg;
   private static ButtonGroup colorGroup;
   private static ColorLoader L;
   /*
   * constructor for objects of BallFrame
   * Creates entire window
   * Create menu with speed, color, and motion options
   * Add the BallPanel with the actual moving balls
   * Have a subpanel with buttons save select and Add Balls to change balls
   * Add frame to the window
   */
   public ColorMain()
   {
        frame = new JFrame( "Color Switcher" );
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );

        menuBar = new JMenuBar();


        colorMenu = new JMenu("Color");
        colorGroup = new ButtonGroup();
        colorMenu.addSeparator();
        
        blue = new JRadioButtonMenuItem("Blue");
        red = new JRadioButtonMenuItem("Red");
        yellow = new JRadioButtonMenuItem("Yellow");
        magenta = new JRadioButtonMenuItem("Magenta");

        blue.addItemListener(this);
        red.addItemListener(this);
        yellow.addItemListener(this);
        magenta.addItemListener(this);

        colorGroup.add(blue);
        colorGroup.add(red);
        colorGroup.add(yellow);
        colorGroup.add(magenta);
        
        colorMenu.add(blue);
        colorMenu.add(red);
        colorMenu.add(yellow);
        colorMenu.add(magenta);

        menuBar.add(colorMenu);
 
        subPanel = new JPanel();
        subPanel.setBackground(Color.gray);
        
        revert = new JButton("Revert");
        save = new JButton("Save");
        chooseImg = new JButton("Choose Image");
        
        
        revert.addActionListener(this);
        save.addActionListener(this);
        chooseImg.addActionListener(this);
        
        subPanel.add(revert);
        subPanel.add(save);
        subPanel.add(chooseImg);
        
        frame.setJMenuBar(menuBar);
        L = new ColorLoader();
        frame.add(L, BorderLayout.CENTER);
        frame.getContentPane().add(subPanel, BorderLayout.SOUTH);

        frame.setSize( 900, 900 ); 
        frame.setVisible( true );
   }
   /*
    * main Method
    * Allows the user to access and view the GUI
    */
   public static void main( String args[] )
   {
        ColorMain r = new ColorMain();
   }
   public void saveImage(File image) {
        BufferedImage img = L.getImg();
         try {
            ImageIO.write(img, "png", image);
        } catch (Exception e) {
            System.out.println("Image could not be read");
        }
    }
   public void actionPerformed(ActionEvent e) {
        if (e.getSource() == revert){
            L.toOriginalImg();
        }
        else if (e.getSource() == save){
            JFileChooser chooser = new JFileChooser("./images");
            if(chooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {
               saveImage(chooser.getSelectedFile());
            }
        }
        else if (e.getSource() == chooseImg){
            JFileChooser select = new JFileChooser("images/");
            int status = select.showOpenDialog(frame);
            if (status == JFileChooser.APPROVE_OPTION) {
                L.loadImage(select.getSelectedFile());
                L.updateImg();
            }
        }
   }
   public void itemStateChanged(ItemEvent e){
        if (e.getStateChange() == ItemEvent.SELECTED) {
            if (e.getSource() == red) {
                L.changeColor(255, 0, 0);
            } else if (e.getSource() == yellow) {
                L.changeColor(255, 255, 0);
            } else if (e.getSource() == blue) {
                L.changeColor(47, 141, 255);
            } else if (e.getSource() == magenta) {
                L.changeColor(255, 0, 255);
            }
        }
   }
}
